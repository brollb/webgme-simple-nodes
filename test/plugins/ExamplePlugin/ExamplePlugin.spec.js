/*jshint node:true, mocha:true*/
/**
 * Generated by PluginGenerator 0.14.0 from webgme on Sun Sep 27 2015 02:56:31 GMT-0500 (CDT).
 */

'use strict';
var testFixture = require('../../globals'),
    path = testFixture.path,
    jszip = require('jszip'),
    fs = require('fs'),
    RES_DIR = path.join(__dirname, '..', '..', 'res');

describe('ExamplePlugin', function () {
    var gmeConfig = testFixture.getGmeConfig(),
        expect = testFixture.expect,
        logger = testFixture.logger.fork('ExamplePlugin'),
        BlobClient = require('webgme/src/server/middleware/blob/BlobClientWithFSBackend'),
        blobClient = new BlobClient(gmeConfig, logger),
        PluginCliManager = testFixture.WebGME.PluginCliManager,
        projectName = 'testProject',
        pluginName = 'ExamplePlugin',
        project,
        gmeAuth,
        storage,
        commitHash;

    before(function (done) {
        testFixture.clearDBAndGetGMEAuth(gmeConfig, projectName)
            .then(function (gmeAuth_) {
                gmeAuth = gmeAuth_;
                // This uses in memory storage. Use testFixture.getMongoStorage to persist test to database.
                storage = testFixture.getMemoryStorage(logger, gmeConfig, gmeAuth);
                return storage.openDatabase();
            })
            .then(function () {
                var importParam = {
                    projectSeed: path.join(testFixture.SEED_DIR, 'ExampleModel.json'),
                    projectName: projectName,
                    branchName: 'master',
                    logger: logger,
                    gmeConfig: gmeConfig
                };

                return testFixture.importProject(storage, importParam);
            })
            .then(function (importResult) {
                project = importResult.project;
                commitHash = importResult.commitHash;
                return project.createBranch('test', commitHash);
            })
            .nodeify(done);
    });

    after(function (done) {
        storage.closeDatabase()
            .then(function () {
                return gmeAuth.unload();
            })
            .nodeify(done);
    });

    var runTest = function(name, nodeId, done) {
        var manager = new PluginCliManager(null, logger, gmeConfig),
            pluginConfig = {
            },
            context = {
                project: project,
                commitHash: commitHash,
                branchName: 'test',
                activeNode: nodeId,
            },
            expected;

        manager.executePlugin(pluginName, pluginConfig, context, function (err, pluginResult) {
            var codeHash = pluginResult.artifacts[0];
            expect(err).to.equal(null);
            expect(typeof pluginResult).to.equal('object');
            expect(pluginResult.success).to.equal(true);

            // Get the results and check them
            blobClient.getObject(codeHash, function(err, obj) {
                var zip = new jszip(),
                    actual;

                zip.load(obj);

                Object.keys(zip.files).forEach(function(filename) {
                    actual = zip.files[filename].asText();
                    expected = fs.readFileSync(path.join(RES_DIR, name, filename), 'utf8');
                    expect(actual).to.equal(expected);
                });
                done();
            });
        });
    };

    var cases = {
        basic: '/598629383',
        cyclic: '/253167239',
        ports: '/2086071635'
    };

    describe('test cases', function() {
        Object.keys(cases).forEach(function(name) {
            it('should run plugin on ' + name, runTest.bind(null, name, cases[name]));
        });
    });

});
