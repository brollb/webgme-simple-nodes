/*jshint node:true, mocha:true*/
/**
 * Generated by PluginGenerator 1.7.0 from webgme on Fri Apr 29 2016 21:46:37 GMT-0500 (CDT).
 */

'use strict';
var testFixture = require('../../globals'),
    path = testFixture.path,
    fs = require('fs'),
    RES_DIR = path.join(__dirname, '..', '..', 'res');

describe('MinimalExample', function () {
    var gmeConfig = testFixture.getGmeConfig(),
        expect = testFixture.expect,
        logger = testFixture.logger.fork('MinimalExample'),
        PluginCliManager = testFixture.WebGME.PluginCliManager,
        BlobClient = require('webgme/src/server/middleware/blob/BlobClientWithFSBackend'),
        blobClient = new BlobClient(gmeConfig, logger),
        projectName = 'testProject',
        pluginName = 'MinimalExample',
        project,
        gmeAuth,
        storage,
        commitHash;

    before(function (done) {
        testFixture.clearDBAndGetGMEAuth(gmeConfig, projectName)
            .then(function (gmeAuth_) {
                gmeAuth = gmeAuth_;
                // This uses in memory storage. Use testFixture.getMongoStorage to persist test to database.
                storage = testFixture.getMemoryStorage(logger, gmeConfig, gmeAuth);
                return storage.openDatabase();
            })
            .then(function () {
                var importParam = {
                    projectSeed: testFixture.path.join(testFixture.SEED_DIR, 'ExampleModel.webgmex'),
                    projectName: projectName,
                    branchName: 'master',
                    logger: logger,
                    gmeConfig: gmeConfig
                };

                return testFixture.importProject(storage, importParam);
            })
            .then(function (importResult) {
                project = importResult.project;
                commitHash = importResult.commitHash;
                return project.createBranch('test', commitHash);
            })
            .nodeify(done);
    });

    after(function (done) {
        storage.closeDatabase()
            .then(function () {
                return gmeAuth.unload();
            })
            .nodeify(done);
    });

    describe('one artifact (no zip!)', function() {
        it('should not zip if only one artifact', function(done) {
            var manager = new PluginCliManager(null, logger, gmeConfig),
                pluginConfig = {
                },
                context = {
                    project: project,
                    commitHash: commitHash,
                    branchName: 'test',
                    activeNode: '/2086071635'  // ports example
                },
                expected;

            manager.executePlugin(pluginName, pluginConfig, context, function (err, pluginResult) {
                var codeHash = pluginResult.artifacts[0];
                expect(err).to.equal(null);
                expect(typeof pluginResult).to.equal('object');
                expect(pluginResult.success).to.equal(true);

                // Get the results and check them
                blobClient.getObject(codeHash, function(err, obj) {
                    var actual = String.fromCharCode.apply(null, new Uint8Array(obj));
                    expected = fs.readFileSync(path.join(RES_DIR, 'output.txt'), 'utf8');
                    expect(actual).to.equal(expected);
                    done();
                });
            });
        });
    });

});
